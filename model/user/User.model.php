<?php
/* Generated by neoan3-cli */

namespace Neoan3\Model;

use Neoan3\Apps\FileAway;
use Neoan3\Apps\Ops;
use Neoan3\Core\RouteException;

/**
 * Class User
 * @package Neoan3\Model
 * @method static login(array $user)
 * @method static register(array $user)
 * @method static find(array $condition=[])
 */
class UserModel extends IndexModel
{
    private static FileAway $store;

    static function __callStatic($method, $arguments)
    {
        self::$store = new FileAway(path . '/frame/demo/storage.json');
        self::$store->setEntity('users');
        $call = "__$method";
        return self::$call(...$arguments);
    }

    static function __login($user)
    {
        $password = $user['password'];
        $user = (array) self::$store->findOne(['userName' => $user['userName']]);
        if (!$user || !$password == Ops::decrypt($user['password'], $password)) {
            throw new RouteException("Unauthorized", 401);
        }
        unset($user['password']);
        return $user;
    }

    static function __find(array $condition=[])
    {
        return self::$store->find($condition);
    }

    static function __register($user)
    {
        // unique?
        if (!empty(self::__find(['userName'=> $user['userName']]))){
            throw new RouteException("Username already taken", 400);
        }
        $user['id'] = uniqid("n3_ğŸ’¾ğŸ’¾ğŸ’¾",true);
        self::$store->add([
            '_id' => $user['id'],
            'userName' => $user['userName'],
            'password' => Ops::encrypt($user['password'], $user['password'])
        ])->save();
        unset($user['password']);
        return $user;
    }

}